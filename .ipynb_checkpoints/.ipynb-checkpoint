{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Observations and Insights "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Mouse ID</th>\n",
       "      <th>Drug Regimen</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age_months</th>\n",
       "      <th>Weight (g)</th>\n",
       "      <th>Timepoint</th>\n",
       "      <th>Tumor Volume (mm3)</th>\n",
       "      <th>Metastatic Sites</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>k403</td>\n",
       "      <td>Ramicane</td>\n",
       "      <td>Male</td>\n",
       "      <td>21</td>\n",
       "      <td>16</td>\n",
       "      <td>0</td>\n",
       "      <td>45.000000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>k403</td>\n",
       "      <td>Ramicane</td>\n",
       "      <td>Male</td>\n",
       "      <td>21</td>\n",
       "      <td>16</td>\n",
       "      <td>5</td>\n",
       "      <td>38.825898</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>k403</td>\n",
       "      <td>Ramicane</td>\n",
       "      <td>Male</td>\n",
       "      <td>21</td>\n",
       "      <td>16</td>\n",
       "      <td>10</td>\n",
       "      <td>35.014271</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>k403</td>\n",
       "      <td>Ramicane</td>\n",
       "      <td>Male</td>\n",
       "      <td>21</td>\n",
       "      <td>16</td>\n",
       "      <td>15</td>\n",
       "      <td>34.223992</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>k403</td>\n",
       "      <td>Ramicane</td>\n",
       "      <td>Male</td>\n",
       "      <td>21</td>\n",
       "      <td>16</td>\n",
       "      <td>20</td>\n",
       "      <td>32.997729</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1888</th>\n",
       "      <td>z969</td>\n",
       "      <td>Naftisol</td>\n",
       "      <td>Male</td>\n",
       "      <td>9</td>\n",
       "      <td>30</td>\n",
       "      <td>25</td>\n",
       "      <td>63.145652</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1889</th>\n",
       "      <td>z969</td>\n",
       "      <td>Naftisol</td>\n",
       "      <td>Male</td>\n",
       "      <td>9</td>\n",
       "      <td>30</td>\n",
       "      <td>30</td>\n",
       "      <td>65.841013</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1890</th>\n",
       "      <td>z969</td>\n",
       "      <td>Naftisol</td>\n",
       "      <td>Male</td>\n",
       "      <td>9</td>\n",
       "      <td>30</td>\n",
       "      <td>35</td>\n",
       "      <td>69.176246</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1891</th>\n",
       "      <td>z969</td>\n",
       "      <td>Naftisol</td>\n",
       "      <td>Male</td>\n",
       "      <td>9</td>\n",
       "      <td>30</td>\n",
       "      <td>40</td>\n",
       "      <td>70.314904</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1892</th>\n",
       "      <td>z969</td>\n",
       "      <td>Naftisol</td>\n",
       "      <td>Male</td>\n",
       "      <td>9</td>\n",
       "      <td>30</td>\n",
       "      <td>45</td>\n",
       "      <td>73.867845</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1893 rows Ã— 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Mouse ID Drug Regimen   Sex  Age_months  Weight (g)  Timepoint  \\\n",
       "0        k403     Ramicane  Male          21          16          0   \n",
       "1        k403     Ramicane  Male          21          16          5   \n",
       "2        k403     Ramicane  Male          21          16         10   \n",
       "3        k403     Ramicane  Male          21          16         15   \n",
       "4        k403     Ramicane  Male          21          16         20   \n",
       "...       ...          ...   ...         ...         ...        ...   \n",
       "1888     z969     Naftisol  Male           9          30         25   \n",
       "1889     z969     Naftisol  Male           9          30         30   \n",
       "1890     z969     Naftisol  Male           9          30         35   \n",
       "1891     z969     Naftisol  Male           9          30         40   \n",
       "1892     z969     Naftisol  Male           9          30         45   \n",
       "\n",
       "      Tumor Volume (mm3)  Metastatic Sites  \n",
       "0              45.000000                 0  \n",
       "1              38.825898                 0  \n",
       "2              35.014271                 1  \n",
       "3              34.223992                 1  \n",
       "4              32.997729                 1  \n",
       "...                  ...               ...  \n",
       "1888           63.145652                 2  \n",
       "1889           65.841013                 3  \n",
       "1890           69.176246                 4  \n",
       "1891           70.314904                 4  \n",
       "1892           73.867845                 4  \n",
       "\n",
       "[1893 rows x 8 columns]"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Dependencies and Setup\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "import scipy.stats as st\n",
    "import sklearn.datasets as dta\n",
    "import numpy as np\n",
    "import os\n",
    "\n",
    "# Study data files\n",
    "mouse_metadata_path = (\"Resources/Unit 5 - Matplotlib_Homework_Instructions_Pymaceuticals_data_Mouse_metadata.csv\")\n",
    "study_results_path = (\"Resources/Unit 5 - Matplotlib_Homework_Instructions_Pymaceuticals_data_Study_results.csv\")\n",
    "\n",
    "# Read the mouse data and the study results\n",
    "mouse_metadata = pd.read_csv(mouse_metadata_path)\n",
    "study_results = pd.read_csv(study_results_path)\n",
    "\n",
    "# Combine the data into a single dataset\n",
    "mouse_metadata_df = pd.DataFrame(mouse_metadata)\n",
    "study_results_df = pd.DataFrame(study_results)\n",
    "\n",
    "comb_mouse_df = mouse_metadata_df.merge(study_results_df, on = \"Mouse ID\")\n",
    "\n",
    "# Display the data table for preview\n",
    "\n",
    "comb_mouse_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Mouse ID</th>\n",
       "      <th>Drug Regimen</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age_months</th>\n",
       "      <th>Weight (g)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>k403</td>\n",
       "      <td>Ramicane</td>\n",
       "      <td>Male</td>\n",
       "      <td>21</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>s185</td>\n",
       "      <td>Capomulin</td>\n",
       "      <td>Female</td>\n",
       "      <td>3</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>x401</td>\n",
       "      <td>Capomulin</td>\n",
       "      <td>Female</td>\n",
       "      <td>16</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>m601</td>\n",
       "      <td>Capomulin</td>\n",
       "      <td>Male</td>\n",
       "      <td>22</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>g791</td>\n",
       "      <td>Ramicane</td>\n",
       "      <td>Male</td>\n",
       "      <td>11</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Mouse ID Drug Regimen     Sex  Age_months  Weight (g)\n",
       "0     k403     Ramicane    Male          21          16\n",
       "1     s185    Capomulin  Female           3          17\n",
       "2     x401    Capomulin  Female          16          15\n",
       "3     m601    Capomulin    Male          22          17\n",
       "4     g791     Ramicane    Male          11          16"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Checking the number of mice.\n",
    "mouse_metadata_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Mouse ID</th>\n",
       "      <th>Drug Regimen</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age_months</th>\n",
       "      <th>Weight (g)</th>\n",
       "      <th>Timepoint</th>\n",
       "      <th>Tumor_volume</th>\n",
       "      <th>Metastatic Sites</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>k403</td>\n",
       "      <td>Ramicane</td>\n",
       "      <td>Male</td>\n",
       "      <td>21</td>\n",
       "      <td>16</td>\n",
       "      <td>0</td>\n",
       "      <td>45.000000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>k403</td>\n",
       "      <td>Ramicane</td>\n",
       "      <td>Male</td>\n",
       "      <td>21</td>\n",
       "      <td>16</td>\n",
       "      <td>5</td>\n",
       "      <td>38.825898</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>k403</td>\n",
       "      <td>Ramicane</td>\n",
       "      <td>Male</td>\n",
       "      <td>21</td>\n",
       "      <td>16</td>\n",
       "      <td>10</td>\n",
       "      <td>35.014271</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>k403</td>\n",
       "      <td>Ramicane</td>\n",
       "      <td>Male</td>\n",
       "      <td>21</td>\n",
       "      <td>16</td>\n",
       "      <td>15</td>\n",
       "      <td>34.223992</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>k403</td>\n",
       "      <td>Ramicane</td>\n",
       "      <td>Male</td>\n",
       "      <td>21</td>\n",
       "      <td>16</td>\n",
       "      <td>20</td>\n",
       "      <td>32.997729</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1888</th>\n",
       "      <td>z969</td>\n",
       "      <td>Naftisol</td>\n",
       "      <td>Male</td>\n",
       "      <td>9</td>\n",
       "      <td>30</td>\n",
       "      <td>25</td>\n",
       "      <td>63.145652</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1889</th>\n",
       "      <td>z969</td>\n",
       "      <td>Naftisol</td>\n",
       "      <td>Male</td>\n",
       "      <td>9</td>\n",
       "      <td>30</td>\n",
       "      <td>30</td>\n",
       "      <td>65.841013</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1890</th>\n",
       "      <td>z969</td>\n",
       "      <td>Naftisol</td>\n",
       "      <td>Male</td>\n",
       "      <td>9</td>\n",
       "      <td>30</td>\n",
       "      <td>35</td>\n",
       "      <td>69.176246</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1891</th>\n",
       "      <td>z969</td>\n",
       "      <td>Naftisol</td>\n",
       "      <td>Male</td>\n",
       "      <td>9</td>\n",
       "      <td>30</td>\n",
       "      <td>40</td>\n",
       "      <td>70.314904</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1892</th>\n",
       "      <td>z969</td>\n",
       "      <td>Naftisol</td>\n",
       "      <td>Male</td>\n",
       "      <td>9</td>\n",
       "      <td>30</td>\n",
       "      <td>45</td>\n",
       "      <td>73.867845</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1888 rows Ã— 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Mouse ID Drug Regimen   Sex  Age_months  Weight (g)  Timepoint  \\\n",
       "0        k403     Ramicane  Male          21          16          0   \n",
       "1        k403     Ramicane  Male          21          16          5   \n",
       "2        k403     Ramicane  Male          21          16         10   \n",
       "3        k403     Ramicane  Male          21          16         15   \n",
       "4        k403     Ramicane  Male          21          16         20   \n",
       "...       ...          ...   ...         ...         ...        ...   \n",
       "1888     z969     Naftisol  Male           9          30         25   \n",
       "1889     z969     Naftisol  Male           9          30         30   \n",
       "1890     z969     Naftisol  Male           9          30         35   \n",
       "1891     z969     Naftisol  Male           9          30         40   \n",
       "1892     z969     Naftisol  Male           9          30         45   \n",
       "\n",
       "      Tumor_volume  Metastatic Sites  \n",
       "0        45.000000                 0  \n",
       "1        38.825898                 0  \n",
       "2        35.014271                 1  \n",
       "3        34.223992                 1  \n",
       "4        32.997729                 1  \n",
       "...            ...               ...  \n",
       "1888     63.145652                 2  \n",
       "1889     65.841013                 3  \n",
       "1890     69.176246                 4  \n",
       "1891     70.314904                 4  \n",
       "1892     73.867845                 4  \n",
       "\n",
       "[1888 rows x 8 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Getting the duplicate mice by ID number that shows up for Mouse ID and Timepoint. \n",
    "cleaned_duplicates = comb_mouse_df.drop_duplicates(subset=['Mouse ID', 'Timepoint'], keep='last')\n",
    "df_new = cleaned_duplicates.rename(columns= {'Tumor Volume (mm3)':'Tumor_volume'} )\n",
    "df_new"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Mouse ID</th>\n",
       "      <th>Drug Regimen</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age_months</th>\n",
       "      <th>Weight (g)</th>\n",
       "      <th>Timepoint</th>\n",
       "      <th>Tumor Volume (mm3)</th>\n",
       "      <th>Metastatic Sites</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>909</th>\n",
       "      <td>g989</td>\n",
       "      <td>Propriva</td>\n",
       "      <td>Female</td>\n",
       "      <td>21</td>\n",
       "      <td>26</td>\n",
       "      <td>0</td>\n",
       "      <td>45.000000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>911</th>\n",
       "      <td>g989</td>\n",
       "      <td>Propriva</td>\n",
       "      <td>Female</td>\n",
       "      <td>21</td>\n",
       "      <td>26</td>\n",
       "      <td>5</td>\n",
       "      <td>47.570392</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>913</th>\n",
       "      <td>g989</td>\n",
       "      <td>Propriva</td>\n",
       "      <td>Female</td>\n",
       "      <td>21</td>\n",
       "      <td>26</td>\n",
       "      <td>10</td>\n",
       "      <td>49.880528</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>915</th>\n",
       "      <td>g989</td>\n",
       "      <td>Propriva</td>\n",
       "      <td>Female</td>\n",
       "      <td>21</td>\n",
       "      <td>26</td>\n",
       "      <td>15</td>\n",
       "      <td>53.442020</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>917</th>\n",
       "      <td>g989</td>\n",
       "      <td>Propriva</td>\n",
       "      <td>Female</td>\n",
       "      <td>21</td>\n",
       "      <td>26</td>\n",
       "      <td>20</td>\n",
       "      <td>54.657650</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Mouse ID Drug Regimen     Sex  Age_months  Weight (g)  Timepoint  \\\n",
       "909     g989     Propriva  Female          21          26          0   \n",
       "911     g989     Propriva  Female          21          26          5   \n",
       "913     g989     Propriva  Female          21          26         10   \n",
       "915     g989     Propriva  Female          21          26         15   \n",
       "917     g989     Propriva  Female          21          26         20   \n",
       "\n",
       "     Tumor Volume (mm3)  Metastatic Sites  \n",
       "909           45.000000                 0  \n",
       "911           47.570392                 0  \n",
       "913           49.880528                 0  \n",
       "915           53.442020                 0  \n",
       "917           54.657650                 1  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Optional: Get all the data for the duplicate mouse ID. \n",
    "\n",
    "dropped_df = comb_mouse_df[comb_mouse_df.duplicated(['Mouse ID','Timepoint'], keep='first')]\n",
    "dropped_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create a clean DataFrame by dropping the duplicate mouse by its ID.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Mouse ID            1888\n",
       "Drug Regimen        1888\n",
       "Sex                 1888\n",
       "Age_months          1888\n",
       "Weight (g)          1888\n",
       "Timepoint           1888\n",
       "Tumor_volume        1888\n",
       "Metastatic Sites    1888\n",
       "dtype: int64"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Checking the number of mice in the clean DataFrame.\n",
    "df_new.count()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Summary Statistics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mean</th>\n",
       "      <th>median</th>\n",
       "      <th>var</th>\n",
       "      <th>std</th>\n",
       "      <th>sem</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Drug Regimen</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Capomulin</th>\n",
       "      <td>40.675741</td>\n",
       "      <td>41.557809</td>\n",
       "      <td>24.947764</td>\n",
       "      <td>4.994774</td>\n",
       "      <td>0.329346</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ceftamin</th>\n",
       "      <td>52.591172</td>\n",
       "      <td>51.776157</td>\n",
       "      <td>39.290177</td>\n",
       "      <td>6.268188</td>\n",
       "      <td>0.469821</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Infubinol</th>\n",
       "      <td>52.884795</td>\n",
       "      <td>51.820584</td>\n",
       "      <td>43.128684</td>\n",
       "      <td>6.567243</td>\n",
       "      <td>0.492236</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ketapril</th>\n",
       "      <td>55.235638</td>\n",
       "      <td>53.698743</td>\n",
       "      <td>68.553577</td>\n",
       "      <td>8.279709</td>\n",
       "      <td>0.603860</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Naftisol</th>\n",
       "      <td>54.331565</td>\n",
       "      <td>52.509285</td>\n",
       "      <td>66.173479</td>\n",
       "      <td>8.134708</td>\n",
       "      <td>0.596466</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Placebo</th>\n",
       "      <td>54.033581</td>\n",
       "      <td>52.288934</td>\n",
       "      <td>61.168083</td>\n",
       "      <td>7.821003</td>\n",
       "      <td>0.581331</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Propriva</th>\n",
       "      <td>52.382993</td>\n",
       "      <td>50.783528</td>\n",
       "      <td>43.220205</td>\n",
       "      <td>6.574208</td>\n",
       "      <td>0.526358</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ramicane</th>\n",
       "      <td>40.216745</td>\n",
       "      <td>40.673236</td>\n",
       "      <td>23.486704</td>\n",
       "      <td>4.846308</td>\n",
       "      <td>0.320955</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Stelasyn</th>\n",
       "      <td>54.233149</td>\n",
       "      <td>52.431737</td>\n",
       "      <td>59.450562</td>\n",
       "      <td>7.710419</td>\n",
       "      <td>0.573111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Zoniferol</th>\n",
       "      <td>53.236507</td>\n",
       "      <td>51.818479</td>\n",
       "      <td>48.533355</td>\n",
       "      <td>6.966589</td>\n",
       "      <td>0.516398</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   mean     median        var       std       sem\n",
       "Drug Regimen                                                     \n",
       "Capomulin     40.675741  41.557809  24.947764  4.994774  0.329346\n",
       "Ceftamin      52.591172  51.776157  39.290177  6.268188  0.469821\n",
       "Infubinol     52.884795  51.820584  43.128684  6.567243  0.492236\n",
       "Ketapril      55.235638  53.698743  68.553577  8.279709  0.603860\n",
       "Naftisol      54.331565  52.509285  66.173479  8.134708  0.596466\n",
       "Placebo       54.033581  52.288934  61.168083  7.821003  0.581331\n",
       "Propriva      52.382993  50.783528  43.220205  6.574208  0.526358\n",
       "Ramicane      40.216745  40.673236  23.486704  4.846308  0.320955\n",
       "Stelasyn      54.233149  52.431737  59.450562  7.710419  0.573111\n",
       "Zoniferol     53.236507  51.818479  48.533355  6.966589  0.516398"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clean_duplicates = df_new.groupby(\"Drug Regimen\").Tumor_volume.agg(['mean','median','var','std','sem'])\n",
    "clean_duplicates"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Generate a summary statistics table of mean, median, variance, standard deviation, and SEM of the tumor volume for each regimen\n",
    "\n",
    "# Using the aggregation method, produce the same summary statistics in a single line\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Bar and Pie Charts"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7f93b6c20040>"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#x_axis = df_new['Drug Regimen'].unique()\n",
    "\n",
    "#y_axis = df_new['Mouse ID'].nunique()\n",
    "\n",
    "#y_axis\n",
    "\n",
    "#Generate a bar plot using both Pandas's DataFrame.plot() and Matplotlib's pyplot that shows  the number of \n",
    "#total mice for each treatment regimen throughout the course of the study.\n",
    "\n",
    "counts = df_new['Drug Regimen'].value_counts()\n",
    "counts.plot(kind=\"bar\")\n",
    "\n",
    "#plt.bar(x_axis, y_axis)\n",
    "\n",
    "\n",
    "#plt.show\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<BarContainer object of 10 artists>"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Generate a bar plot showing the total number of unique mice tested on each drug regimen using pyplot.\n",
    "counts = df_new['Drug Regimen'].value_counts()\n",
    "y_axis = counts.values \n",
    "x_axis = counts.index.values\n",
    "#print(counts.values)\n",
    "\n",
    "plt.bar(x_axis, y_axis)\n",
    "# print(counts)\n",
    "\n",
    "# print(df_new['Drug Regimen'].unique())\n",
    "\n",
    "# print(counts.values)\n",
    "# print(counts.index.values)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7f93b6d9c100>"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAPUAAADnCAYAAADGrxD1AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAATOElEQVR4nO3de5BkZX3G8e9vZ3Z3dpedRlcEoshJouUFsIK4q0BFSTCKtgE3oghCVCQSr6CSeADFE2+0JBYihSKVoGgpErKRiw2CF0CC4AVBboqotBUMIDcPMDM7w8ye/PH2FMMws9Mz292/c3k+VV1z657zDMWz7+lzeV/LsgwRKY9l3gFEpLtUapGSUalFSkalFikZlVqkZFRqkZJRqUVKRqUWKRmVWqRkVGqRklGpRUpGpRYpGZVapGRUapGSUakLwMwyM/vqjK8Hzew+M/vWAq/bb6HnSPmo1MUwAuxuZqvaX/8N8HvHPJJjKnVxXArU258fCpw7/QMz22BmPzSzG9ofnzv7xWa2xszONrOftJ93UJ9yS5+p1MXxDeBNZjYEvBD40Yyf/RJ4WZZlewInAZ+a4/UnAt/Psmw98FfAv5rZmh5nFgeD3gGkM1mW3WRmEWGUvmTWj2vAOWb2HCADls/xK14JHGhmx7W/HgKeBfyiJ4HFjUpdLBcB/wbsB6yb8f2PA1dkWbaxXfwr53itAa/Psuz23kYUb9r9LpazgY9lWXbzrO/XePzA2Vvnee1lwHvNzADMbM+eJBR3KnWBZFl2V5Zlp83xo1OAk83sGmBgnpd/nLBbfpOZ3dL+WkrINEWwSLlopBYpGZVapGRUapGSUalFSkbnqUsqipvrgKj92LX9cRdgGFg947GCcA57WfvxGPAgcP+MxwOzvv4N0Go16jrKmkM6+l1wUdzcAdgH2BvYg1DgXYHterzpR4BbgJuAm6c/thr1P/Z4u7IAlbpAori5DNiNUOLpx7NdQz3ZXcD1wOXApa1G/U7nPJWjUudcFDefCmwE/g7Yl3D1WJH8inCH2beBK1uN+mbnPKWnUufQjCK/Adif8hz7GAOuItyQcn6rUb/HOU8pqdQ5UeIiz2eScD36OcBFrUZ93DlPaajUzqK4uQF4H6HMK5zjeHmQUO4vtBr1O7zDFJ1K7SCKm4PAG4FjgA3OcfIkA74LnEEYvfU/5xKo1H0Uxc1VwFHABwmnnWR+NwMntRr1C7yDFI1K3QdR3FwNHNt+7OAcp2h+Sij3pd5BikKl7rEobh4GfBp4pneWgvsh8OFWo36Fd5C8U6l7JIqb64HTCFd6SfdcAZzQatSv8w6SVyp1l0Vxc2egARxBuKZaui8DzgQ+1GrUH/EOkzcqdZdEcXMl4QDY8fT+umsJ/hf4x1ajPnt21UpTqbsgipu7ESbX38M7S0V9DTi21ajf7x0kD3Q/9TaK4uZ7CEdoVWg/bwZui+Lmod5B8kAj9RK1b3k8G3itdxZ5gouBt7Ua9Qe8g3hRqZcgipuvAr4M7OQcReZ2J7Cx1aj/3DuIB5V6EaK4uYJwzvkYdGQ770aBo1qN+rkLPrNkVOoORXHzKcCFwF96Z5FF+Qzh1NeUd5B+Uak7EMXNiHCj//Oco8jSfA84pCrvs1XqBURxcy/gW+j9c9G1CO+zb/QO0ms6pbUVUdx8DWGmDhW6+CLgB1HcfLl3kF5TqecRxc1/ICwdq4XZy2MtcGkUN1/tHaSXVOo5RHHzY8BZzL+CpBTXKuDCKG6+wTtIr6jUs7QL/RHvHNJTy4Fzo7j5Ru8gvaADZTNEcfN44FPeOaRvJoHDWo36+d5Bukmlbovi5jHAZ71zSN9NAm9qNeqbvIN0i0oNRHHzcOAr6CqxqpoAXtFq1K/2DtINlS91+zruiwnvs6S67gc2lGGZoEqXOoqbLyZMj6NJDQTgNmDvVqP+sHeQbVHZo99R3NyRcB5ahZZpLwDOi+JmoU9lVrLU7dUjvw7s7J1FcucAwk0ghVXJUgP/Avy1dwjJrWOiuHm0d4ilqtx76ihuHkBYdVFHumVrJglHxK/yDrJYlSp1FDd3AW4A1nlnkUL4HfDCoh04q8zudxQ3lwPnoUJL53YFTvUOsViVKTVhGiKtliGLdWQUNws1uWQldr+juLkvcDV6Hy1Lcw+wW6tRf9A7SCdKP1K314I+ExValm4n4PPeITpV+lID7wd29w4hhXdIUW7VLPXudxQ3n0W49E+zl0g3PEDYDb/XO8jWlH2k/hwqtHTPOsKFS7lW2pE6ipt/S7i2W6SbJoE9Wo36L72DzKeUI3UUN1cDp3vnkFIaBE72DrE1pSw1cBzhwgGRXnhd+zRpLpWu1FHcXAsc651DSu8U7wDzKV2pgXcDT/EOIaW3TxQ3N3qHmEupDpS130u3gB2co0g13A7s3mrUJ72DzFS2kfpoVGjpn+cCb/EOMVtpSh3FzZWEA2Qi/fR+7wCzlabUwJHAn3iHkMrZLYqbr/QOMVMpSt2+V/pD3jmksnI1Wpei1MBGdF5a/LwqipvP9Q4xrSylfrt3AKk0A97hHWJa4U9pte/EupPy/AMlxfQA8IxWoz7uHaQMRXgb5fg7pNjWAa/3DgHlKMPfewcQaTvSOwAUfPc7ipsvAa7zziHSNgk8vdWoP+QZougj9aHeAURmGARe4x2isKVur4d1iHcOkVkO8g5Q2FIT5vDeyTuEyCwHRHFzhWeAIpd6f+8AInNYi/Pii0UutVatlLw60HPjhTz6HcXNVcBDwErvLCJz+D2wS6tRdylXUUfqfVGhJb+eAbzIa+NFLbV2vSXv3BZjVKlFeuPFXhsuXKmjuDmM438wkQ7t5bXhwpWa8H56wDuEyAKe354Is++KWGqtYClFMADs6bHhIpY6NzNMiCzAZRe8iKV+nncAkQ65HPspYqk1UktRuIzUhbqiLIqb64D7vXOIdGgKWNFq1Lf0c6NFG6k1SkuRDAA79nujRSu13k9L0ezc7w0WrdQaqaVo+r5qTNFKvYt3AJFFUqkXUPMOILJI2v1ewFrvACKLlM+R2szePuvrATP7aG8ibdWwwzZFtkU+Sw3sb2aXmNnOZrY7Ya5tj1FTI7UUTd93vwc7eVKWZYeZ2SHAzcAocGiWZdf0NNncNFJL0fT9Tq1Od7+fAxwDbAJawBFm5nFbmUZqKZqOBs5u6nT3+2LgpCzLjgZeDtwB/KRnqebQnktZ85JJ0fS91J1ucEOWZQ8DZOFi8c+Y2UW9izWn7fq8PZFuyG2pV5nZqcAzsiw7wMxeQJhY7Y7eRZOtGWBqcjvGRtba2Oh2jI0NMzI+bCMT29vIRI2RyZo9OlVjZEvNRrJhRllrY7aGsYE1bB4YsonlQzy2YjmPrRxkauUAW4YMlnv/TWW0BXs4zGbdP52W+svAl4AT21//CjgP+I8eZJrP5j5uq6tWMT62JhRwbJjRzcM2Ml5jZKJmI49tz6OTNRuZGmZky7CN2tpQwGVr2DywysYHh5hYvpLHVixncmiQqaFlbFltsMaMFYSLcXRBTo4tI+zh9lOnpX5almX/aWbHA2RZNmlmUz3MNZfxXm9gGVum1jA2spax0bU2OjbM6Ph0Abe3uUa/UVvD5mVr2Dw4ZBODK5lYsYLJFcuZGhpgatUystWEAq4CVvU6v+TSZL832GmpR8xsHZABmNlLgbRnqebQatSnorg5STvzEOOb17B5pF2+sWEbHR9mdKJmj06G3c+R6QLy+Og3NrD6iaPfysFQvlVGtsaMlYTTZjp1Jt2S21J/ALgI+HMzuwbYATi4Z6nmccfKI+4cZGpHwug3BAz1O4PIIo31e4NbPaVlZuvNbKcsy35GOJV1AmE3+HLgrj7ke4LlNrXSjGEzTREshXFPvze40HnqLwIT7c/3IRwoO4NwOO+sHuaazx8dtimyLe7u9wYX2v0eyLLswfbnhwBnZVm2CdhkZjf2NtqcVGopmr6XeqGResDMpou/P/D9GT/r+0l14D6HbYpsi//r9wYXKua5wFVmdj/hDf/VAGb2bPp89Lvt1w7bFNkW+dr9zrLsk2b2PcLtY5dnj88nvAx4b6/DzUFXsEnR5KvUAFmWXTfH937VmzgLUqmlaHL3njpvVGopkowcntLKlyS9G3jEO4ZIh35Nkvb88ubZilXqQAfLpCh+5rHRIpZau+BSFNd7bLSIpfY6SCeyWBqpO/Sko/EiOaVSd+h/gL4uDSqyBHeSpP2d8qSteKVO0hTwuO5cZDFcRmkoYqmDq7wDiCzA5SAZqNQivXKl14aLWuqraU+tJJJD9wE/8tp4MUudpA8SlgASyaNLSFK3g7nFLHWgXXDJq4s9N17kUl/oHUBkDhOEOfzcFLnUV+BwB4zIAq4iSV1vOipuqcN7lvO8Y4jM4rrrDUUudfB17wAis3zLO0CxS52kP0a3Ykp+XEuS3ukdotilDr7hHUCk7QveAaAcpf6adwAR4AHgfO8QUIZSJ+kvgRu8Y0jlnUOS5mK55eKXOjjdO4BUWkZYoioXylLqrwG/9w4hlfV9kjQ3M/KUo9RJOgF81juGVNaZ3gFmKkepgy+iBfSk/+4GLvAOMVN5Sh0uzcvVv5hSCSeTpJPeIWYqT6mD04C+T54uldUiRwfIppWr1El6D3COdwypjH9pH8/JlXKVOjiFcPubSC/9Aviqd4i5lK/USfobdCRceu8kknTKO8Rcylfq4BM4LCEqlXE9sMk7xHzKWepwJDz2jiGldSJJmtuJL8tZ6uCrwLXeIaR0LiFJL/MOsTXlLXX4l/R9aIke6Z6HgaO9QyykvKUGSNKfAl/yjiGl8c8k6V3eIRZS7lIHJwAPeoeQwrsCOMs7RCfKX+ok/QNwlHcMKbRR4Kg8HxybqfylBkjSb5LDy/mkME4kSX/rHaJT1Sh18H7gNu8QUjjXAp/zDrEYlmWF2KPojqT2QuDHwErvKFIIKbCeJL3DO8hiVGmkhiS9Cfgn7xhSCFuAw4pWaKhaqQGS9HRysIqC5N5JJOkl3iGWonqlDo4E3Cddl9zaRJJ+0jvEUlWz1El6P/BqdP5anuxW4K3eIbZFNUsNkKS3AwcCuZirWXLhIeAgkvRR7yDborqlBkjSa4DD0fXhAlOEA2O/8Q6yrapdaoAk3QR8wDuGuMqAI0nSb3sH6QaVGiBJTwNO9Y4hbt5Lkn7FO0S3qNSP+yBaxL6KjidJz/AO0U0q9bRwsf7haGncKvkISdrwDtFtKvVMYVL2N6N7sKvgBJL0E94hekGlni1JtwBvBz7vHUV6JiZJT/YO0SvVuqFjsZLaR4HEO4Z0zQThvuhcztfdLSr1QpLa0cAZwIB3FNkm9wEb29cmlJpK3YmkdhBhdtK13lFkSW4DXkuSVuJ6f72n7kSSXgisB27xjiKLdhmwd1UKDSp158K14i8hp+snyZxOB+ok6cPeQfpJu99LkdTeQZjiRjOo5NMjwLEk6dneQTyo1EuV1F4EnA/8mXcUeYKrgbdUaXd7Nu1+L1WS/gzYixwvlFYx44SpqvarcqFBI3V3JLXXEd6/PdM7SkXdCBxBkupAJhqpuyNJLwCeT7jTK5drFpfUFPBJYIMK/TiN1N2W1PYkLByw3jtKyX0XOI4k/bl3kLxRqXshqS0D3gl8Chh2TlM2txAWqrvUO0heqdS9lNR2JBy8eSew2jlN0d0DfAT4EkmqtzhboVL3Q1J7OnAc8C5gjXOaohkBPgOcQpKOeIcpApW6n5La0wgzrLwH2M45Td7dC5wJfIEkvdc7TJGo1B6S2jrCZIfvArZ3TpM3NwCnAd8gSce9wxSRSu0pqQ0BG4G3AftT3VOMU8CFwGkk6Q+8wxSdSp0XSe1ZwFsIq0NU5dLT24H/Av6dJG05ZykNlTpvkpoBLyeM3gdSvt3zmwlF3kSS3uodpoxU6jxLagPABuCV7cdLKOYMLD8lXCO/qYhLwxaNSl0kSa1GeO89XfI/9Q00p1FCia8FrgOu1dHr/lKpiyxc3LL7jMcewG7073TZONDi8RJfC9zUnmpZnKjUZRPek+9KKPlzgB2AdfM85pvkYZww4o4AfwR+N+PRmvH5ve1FECRHVOoqS2qrgUHCqp/Tj4n23OdSUCq1SMlU9WIHkdJSqUVKRqUWKRmVWp7EzKbM7MYZj6iH22qZ2dN69furaNA7gOTSWJZlf+EdQpZGI7V0xMz2MrOrzOx6M7vMzHZuf/9KMzvVzH5gZr8ws/Vm9t9mdoeZfWLG6y9ov/ZWM3vHPNs43Mx+3N47+KKZFfGSWHcqtcxl1Yxd72+a2XLCFMgHZ1m2F3A2YRbPaRNZlr2MMKnBhcC7CRe/vNXM1rWfc2T7tS8G3jfj+wCY2fOBQ4B923sJU8Cbe/g3lpZ2v2UuT9j9NrPpy1C/Y2YQbiq5e8bzL2p/vBm4Ncuyu9uv+y2wC/AAocgb28/bhXC12wMzfsf+hMURftLexirgD939s6pBpZZOGKGse8/z8+kZSrbM+Hz660Ez2w94BbB3lmWjZnYlMDTHNs7Jsuz4rqWuKO1+SyduB3Yws70BzGy5me22iNfXgIfahX4e8NI5nvM94GAze3p7G081s123NXgVqdSyoCzLJoCDgU+b2c8Jy9zss4hf8W3CiH0T8HHCLZmzt3Eb8GHg8vbzvgPsvK3Zq0jXfouUjEZqkZJRqUVKRqUWKRmVWqRkVGqRklGpRUpGpRYpGZVapGRUapGSUalFSkalFikZlVqkZFRqkZJRqUVKRqUWKZn/BzcvGgWijCxUAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Generate a pie plot showing the distribution of female versus male mice using pandas\n",
    "counts = df_new['Sex'].value_counts()\n",
    "counts.plot(kind='pie')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[958 930]\n",
      "['Male' 'Female']\n"
     ]
    },
    {
     "ename": "ValueError",
     "evalue": "could not convert string to float: 'Male'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-12-96dd96bc7c9c>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx_axis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 10\u001b[0;31m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpie\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx_axis\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0my_axis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     11\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mxticks\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mticks\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcounts\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.8/site-packages/matplotlib/pyplot.py\u001b[0m in \u001b[0;36mpie\u001b[0;34m(x, explode, labels, colors, autopct, pctdistance, shadow, labeldistance, startangle, radius, counterclock, wedgeprops, textprops, center, frame, rotatelabels, data)\u001b[0m\n\u001b[1;32m   2746\u001b[0m         \u001b[0mwedgeprops\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtextprops\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcenter\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mframe\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2747\u001b[0m         rotatelabels=False, *, data=None):\n\u001b[0;32m-> 2748\u001b[0;31m     return gca().pie(\n\u001b[0m\u001b[1;32m   2749\u001b[0m         \u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mexplode\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mexplode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabels\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlabels\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcolors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcolors\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2750\u001b[0m         \u001b[0mautopct\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mautopct\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpctdistance\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mpctdistance\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mshadow\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mshadow\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.8/site-packages/matplotlib/__init__.py\u001b[0m in \u001b[0;36minner\u001b[0;34m(ax, data, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1563\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0minner\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0max\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1564\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mdata\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1565\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0max\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0mmap\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msanitize_sequence\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1566\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1567\u001b[0m         \u001b[0mbound\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnew_sig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbind\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0max\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.8/site-packages/matplotlib/axes/_axes.py\u001b[0m in \u001b[0;36mpie\u001b[0;34m(self, x, explode, labels, colors, autopct, pctdistance, shadow, labeldistance, startangle, radius, counterclock, wedgeprops, textprops, center, frame, rotatelabels)\u001b[0m\n\u001b[1;32m   2910\u001b[0m         \u001b[0;31m# The use of float32 is \"historical\", but can't be changed without\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2911\u001b[0m         \u001b[0;31m# regenerating the test baselines.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2912\u001b[0;31m         \u001b[0mx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masarray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfloat32\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2913\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndim\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0;36m1\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msqueeze\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndim\u001b[0m \u001b[0;34m<=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2914\u001b[0m             cbook.warn_deprecated(\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.8/site-packages/numpy/core/_asarray.py\u001b[0m in \u001b[0;36masarray\u001b[0;34m(a, dtype, order)\u001b[0m\n\u001b[1;32m     83\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     84\u001b[0m     \"\"\"\n\u001b[0;32m---> 85\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0morder\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0morder\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     86\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     87\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mValueError\u001b[0m: could not convert string to float: 'Male'"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Generate a pie plot showing the distribution of female versus male mice using pyplot\n",
    "counts = df_new['Sex'].value_counts()\n",
    "\n",
    "y_axis = counts.values \n",
    "\n",
    "x_axis = counts.index.values\n",
    "print(y_axis)\n",
    "print(x_axis)\n",
    "\n",
    "plt.pie(x_axis,y_axis)\n",
    "plt.xticks(ticks = counts)\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Quartiles, Outliers and Boxplots"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 185,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>Timepoint</th>\n",
       "      <th>Tumor_volume</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Drug Regimen</th>\n",
       "      <th>Mouse ID</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">Capomulin</th>\n",
       "      <th>b128</th>\n",
       "      <td>45</td>\n",
       "      <td>45.651331</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>b742</th>\n",
       "      <td>45</td>\n",
       "      <td>45.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>f966</th>\n",
       "      <td>20</td>\n",
       "      <td>45.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>g288</th>\n",
       "      <td>45</td>\n",
       "      <td>46.304003</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>g316</th>\n",
       "      <td>45</td>\n",
       "      <td>46.809225</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">Zoniferol</th>\n",
       "      <th>q633</th>\n",
       "      <td>45</td>\n",
       "      <td>70.827796</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>s337</th>\n",
       "      <td>45</td>\n",
       "      <td>62.109651</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>w140</th>\n",
       "      <td>5</td>\n",
       "      <td>47.717952</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>w575</th>\n",
       "      <td>45</td>\n",
       "      <td>68.401286</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>x613</th>\n",
       "      <td>15</td>\n",
       "      <td>48.077646</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>249 rows Ã— 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                       Timepoint  Tumor_volume\n",
       "Drug Regimen Mouse ID                         \n",
       "Capomulin    b128             45     45.651331\n",
       "             b742             45     45.000000\n",
       "             f966             20     45.000000\n",
       "             g288             45     46.304003\n",
       "             g316             45     46.809225\n",
       "...                          ...           ...\n",
       "Zoniferol    q633             45     70.827796\n",
       "             s337             45     62.109651\n",
       "             w140              5     47.717952\n",
       "             w575             45     68.401286\n",
       "             x613             15     48.077646\n",
       "\n",
       "[249 rows x 2 columns]"
      ]
     },
     "execution_count": 185,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Calculate the final tumor volume of each mouse across four of the treatment regimens:  \n",
    "# Capomulin, Ramicane, Infubinol, and Ceftamin\n",
    "\n",
    "# Start by getting the last (greatest) timepoint for each mouse\n",
    "grouping = df_new.groupby(['Drug Regimen','Mouse ID']).Timepoint.agg('max')\n",
    "grouped_new_df = pd.DataFrame(grouping)\n",
    "grouped_new_df\n",
    "\n",
    "last_timepoint = df_new.groupby(['Drug Regimen','Mouse ID']).Tumor_volume.agg('max')\n",
    "last_time = pd.DataFrame(last_timepoint)\n",
    "last_time\n",
    "\n",
    "\n",
    "# Merge this group df with the original dataframe to get the tumor volume at the last timepoint\n",
    "comb_tumor_time = pd.merge(grouped_new_df,last_time, on = ['Drug Regimen','Mouse ID'])\n",
    "comb_tumor_time\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 183,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The lower quartile of Tumor Volume is: 45.5098442875\n",
      "The upper quartile of Tumor Volume is: 59.930261755000004\n",
      "The interquartile range of Tumor Volume is: 14.420417467500002\n",
      "The the median of Tumor Volume is: 46.860058175 \n",
      "Values below 23.87921808625 could be outliers.\n",
      "Values above 81.56088795625001 could be outliers.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>Timepoint</th>\n",
       "      <th>Tumor_volume</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Drug Regimen</th>\n",
       "      <th>Mouse ID</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [Timepoint, Tumor_volume]\n",
       "Index: []"
      ]
     },
     "execution_count": 183,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Put treatments into a list for for loop (and later for plot labels)\n",
    "treatments = ['Capomulin', 'Ramicane', 'Infubinol', 'Ceftamin']\n",
    "\n",
    "#Create empty list to fill with tumor vol data (for plotting)\n",
    "\n",
    "stat_four_treat_df = comb_tumor_time_df.loc[treatments]\n",
    "\n",
    "#Calculate the IQR and quantitatively determine if there are any potential outliers. \n",
    "\n",
    "quartiles = stat_four_treat_df['Tumor_volume'].quantile([.25,.5,.75])\n",
    "lowerq = quartiles[0.25]\n",
    "upperq = quartiles[0.75]\n",
    "iqr = upperq-lowerq\n",
    "\n",
    "print(f\"The lower quartile of Tumor Volume is: {lowerq}\")\n",
    "print(f\"The upper quartile of Tumor Volume is: {upperq}\")\n",
    "print(f\"The interquartile range of Tumor Volume is: {iqr}\")\n",
    "print(f\"The the median of Tumor Volume is: {quartiles[0.5]} \")\n",
    "\n",
    "lower_bound = lowerq - (1.5*iqr)\n",
    "upper_bound = upperq + (1.5*iqr)\n",
    "print(f\"Values below {lower_bound} could be outliers.\")\n",
    "print(f\"Values above {upper_bound} could be outliers.\")\n",
    "\n",
    "outlier_Tumor_Volume = stat_four_treat_df.loc[(stat_four_treat_df['Tumor_volume'] < lower_bound) | (stat_four_treat_df['Tumor_volume'] > upper_bound)]\n",
    "outlier_Tumor_Volume\n",
    "    \n",
    "    # Locate the rows which contain mice on each drug and get the tumor volumes\n",
    "    \n",
    "    \n",
    "    # add subset \n",
    "    \n",
    "    \n",
    "    # Determine outliers using upper and lower bounds\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 211,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Generate a box plot of the final tumor volume of each mouse across four regimens of interest\n",
    "plt.scatter(stat_four_treat_df['Timepoint'],stat_four_treat_df['Tumor_volume'])\n",
    "plt.xlabel(\"Timepoint\")\n",
    "plt.ylabel(\"Tumor_volume\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Line and Scatter Plots"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 209,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Generate a line plot of tumor volume vs. time point for a mouse treated with Capomulin\n",
    "df_Capo = comb_tumor_time_df.loc['Capomulin']\n",
    "\n",
    "#y = comb_tumor_time_df.loc['Capomulin']\n",
    "\n",
    "plt.plot(df_Capo['Tumor_volume'],df_Capo['Timepoint'])\n",
    "plt.xlabel(\"Timepoint\")\n",
    "plt.ylabel(\"Tumor_volume\")\n",
    "plt.show()\n",
    "\n",
    "# comb_tumor_time_df.loc['Capomulin','Tumor_volume'],\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 206,
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (<ipython-input-206-49e95568fbd9>, line 4)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-206-49e95568fbd9>\"\u001b[0;36m, line \u001b[0;32m4\u001b[0m\n\u001b[0;31m    y\u001b[0m\n\u001b[0m    ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "# Generate a scatter plot of average tumor volume vs. mouse weight for the Capomulin regimen\n",
    "#x = comb_tumor_time_df.loc['Capomulin','Timepoint']\n",
    "y = comb_tumor_time_df.loc['Capomulin','Tumor_volume'].agg[(['mean'])\n",
    "y\n",
    "# plt.scatter(y,x)\n",
    "\n",
    "# plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Correlation and Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Calculate the correlation coefficient and linear regression model \n",
    "# for mouse weight and average tumor volume for the Capomulin regimen\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
